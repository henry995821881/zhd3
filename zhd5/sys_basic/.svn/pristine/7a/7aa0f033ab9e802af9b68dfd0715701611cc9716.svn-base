package com.xyscm.sys.basic.service;

import java.math.BigDecimal;
import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.xyscm.sys.basic.common.exception.BaseException;
import com.xyscm.sys.basic.common.util.StringUtil;
import com.xyscm.sys.basic.dao.BasicEmployeeMapper;
import com.xyscm.sys.basic.model.BasicEmployee;
@Service
public class BasicEmployeeService {
		
	@Autowired
	BasicEmployeeMapper basicEmployeeMapper;
			
	/**
	 * 查询信息
	 * 
	 * @return List<BasicEmployee>
	 */
	public List<BasicEmployee> queryAll(){
		return basicEmployeeMapper.queryAll();
	}

	/**
	 * 查询员工信息
	 * @param queryBean 查询条件对象
	 * @param page 分页对象
	 * @return
	 */
	/*public List<BasicEmployee> query(QueryBean queryBean,PageTools page){
		return basicEmployeeMapper.query(queryBean, page);
	}*/

	/**
	 * 通过员工代码,使用单位查询员工记录
	 * @param employeeCode 职工代码
	 * @param memberCode 使用单位代码
	 * @return
	 */
	public BasicEmployee getByCode(String employeeCode, String memberCode){
		return basicEmployeeMapper.getByCode(employeeCode, memberCode);
	}

	/**
	 * 通过员工名称,使用单位查询员工记录
	 * @param memberCode
	 * @param employeeName
	 * @return
	 * 
	 */
	public BasicEmployee getByName(String memberCode, String employeeName){
		return basicEmployeeMapper.getByName(memberCode, employeeName);
	}

	/**
	 * 查询下拉列表信息
	 * @param user 用户信息
	 * @param page 分页对象
	 * @param query 过滤职员代码或职员名称或助记码
	 * @param employeeCode 职员代码
	 * @return
	 */
	/*public List<ComboBean> queryCombo(UserSession user,PageTools page,String query,String employeeCode,String employeeName){
		return basicEmployeeMapper.queryCombo(user, page, query, employeeCode,employeeName);
	}*/

	/**
	 * 插入记录
	 * 
	 * @param mod
	 * @return 1 成功 -1 失败
	 */
	public int save(BasicEmployee mod){
		String msg = checkEmployee(mod);
		if(StringUtils.isNotBlank(msg)) {
			throw new BaseException("0310004", "操作失败:"+msg, "插入失败,"+msg);
		}
		if(StringUtils.isBlank(mod.getEmployeeCode())) {
			mod.setEmployeeCode(Integer.parseInt(basicEmployeeMapper.getMaxEmployeeCode())+1+"");
		}
		BasicEmployee oldMod=basicEmployeeMapper.getByCode(mod.getEmployeeCode(), mod.getMemberCode());
		if(null != oldMod) {
			throw new BaseException("0310005", "操作失败:该记录已经存在", "新增失败,信息["	+ oldMod.getEmployeeCode() + "/"	+ oldMod.getEmployeeName() + "/"+ oldMod.getMemberCode() + "]保存失败:该记录已经存在");
		}
		oldMod=basicEmployeeMapper.getByName(mod.getMemberCode(), mod.getEmployeeName());
		if(null!=oldMod){
			throw new BaseException("0310005","操作失败:名称已经存在","新增失败,信息["+mod.getEmployeeCode()+"/"+mod.getEmployeeName()+"/"+mod.getMemberCode()+"]失败:信息已经存在");
		}
		try{
			basicEmployeeMapper.save(mod);
		}catch (Exception e) {
			throw new BaseException("0310006", "操作失败", "插入信息["	+ mod.getEmployeeCode() + "/" + mod.getEmployeeName() + "/"	+ mod.getMemberCode() + "]失败,异常");
		}
		return 1;
	}

	/**
	 * 更新记录
	 * 
	 * @param mod
	 * @return 1 成功 -1 失败
	 */
	public int update(BasicEmployee mod){
		String msg = checkEmployee(mod);
		if(StringUtils.isNotBlank(msg)) {
			throw new BaseException("0310007", "操作失败:" + msg, "插入失败," + msg);
		}
		BasicEmployee oldMod = basicEmployeeMapper.getByCode(mod.getEmployeeCode(), mod.getMemberCode());
		if(null==oldMod) {
			throw new BaseException("0310008", "该记录已经不存在", "更新信息["+ mod.getEmployeeCode() + "/" + mod.getEmployeeName() + "/"+ mod.getMemberCode() + "]保存失败:该记录已经不存在");
		}
		if(!mod.getEmployeeName().equals(oldMod.getEmployeeName())){
			BasicEmployee checkoldMod=basicEmployeeMapper.getByName(mod.getMemberCode(), mod.getEmployeeName());
			if(null!=checkoldMod){
				throw new BaseException("0310009","操作失败:名称已经存在","更新失败,信息["+mod.getEmployeeCode()+"/"+mod.getEmployeeName()+"/"+mod.getMemberCode()+"]失败:信息已经存在");
			}
		}
		try{
			mod.setEmployeeId(oldMod.getEmployeeId());
			basicEmployeeMapper.update(mod);
		}catch (Exception e) {
			throw new BaseException("0310009", "操作失败", "更新信息["	+ mod.getEmployeeCode() + "/" + mod.getEmployeeName() + "/"	+ mod.getMemberCode() + "]保存失败,异常");
		}
		return 1;
	}

	/**
	 * 删除记录
	 * @param employeeCode 员工代码
	 * @param memberCode 使用单位
	 * @return
	 */
	public int delete(String employeeCode, String memberCode){
		if (StringUtil.isBlankOne(employeeCode,memberCode)) {
			throw new BaseException("0310001", "", "删除[" + employeeCode+ "]失败:memberCode为空");
		}
		int i = 0;
		try {
			i = basicEmployeeMapper.delete(employeeCode, memberCode);
		} catch (Exception e) {
			throw new BaseException("0310002", "", "删除["+ memberCode + "/" + employeeCode + "]异常");
		}
		if (1 != i) {
			throw new BaseException("0310003", "", "删除["+ memberCode + "/" + employeeCode + "]失败:" + i);
		}
		return 1;
	}
	/**
	 * 获取相应的记录数
	 * @param orgCode
	 * @param deptCode
	 * @param other1
	 * @param other2
	 * @param other3
	 * @param memberCode
	 * @return
	 */
	public int getCountByCode(String orgCode, String deptCode, String other1, String other2, String other3, String memberCode){
		return basicEmployeeMapper.getCountByCode(orgCode, deptCode, other1, other2, other3, memberCode);
	}
	/**
	 * 根据工种查询业务员
	 * @param worktypeName
	 * @return
	 */
	public List<BasicEmployee> queryPdaEmployee(String worktypeName){
		return basicEmployeeMapper.queryPdaEmployee(worktypeName);
	}
	
	/**
	 * @param mod
	 * @return 提示消息
	 */
	private String checkEmployee(BasicEmployee mod) {
		if (null == mod) {
			return "数据为空";
		}
		String msg = "";
		msg += StringUtil.isBlankToMsg(mod.getMemberCode(), "数据中心为空");
		msg += StringUtil.isBlankToMsg(mod.getEmployeeName(), "请输入姓名");
		msg += StringUtil.isBlankToMsg(mod.getOrgCode(), "机构为空");
		msg += StringUtil.isBlankToMsg(mod.getDeptCode(), "部门为空");
		if(null==mod.getEmployeeState()){
			mod.setEmployeeState(new BigDecimal(0L));
		}
		if (StringUtils.isNotBlank(msg) && msg.trim().endsWith(",")) {
			msg = msg.trim().substring(0, msg.trim().length() - 1);
		}
		return msg;
	}
	
}
