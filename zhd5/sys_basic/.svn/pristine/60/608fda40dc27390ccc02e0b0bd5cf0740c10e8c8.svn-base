package com.xyscm.sys.basic.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import com.xyscm.sys.basic.common.exception.BaseException;
import com.xyscm.sys.basic.dao.BasicWareAreaMapper;
import com.xyscm.sys.basic.model.BasicOrg;
import com.xyscm.sys.basic.model.BasicWareArea;
import com.xyscm.sys.basic.model.BasicWarehouse;

/**
 * 
 * 
 * 库区设置
 * 
 * @author Administrator
 * 
 */
@Service
public class BasicWareAreaService {

	@Autowired
	BasicWareAreaMapper basicWareAreaMapper;

	/**
	 * 必须 memeberCode warehouse_code
	 * 
	 * 
	 * @param record
	 * @return
	 */
	public List<BasicWareArea> queryList(BasicWareArea record) {

		List<BasicWareArea> list = null;
		try {
			list = basicWareAreaMapper.queryList(record);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new BaseException("001","查询库位失败！");
		}

		return list;
	}
	
	
	/**
	 * 分页查询
	 * @param pageNum
	 * @param pageSize
	 * @param record
	 * @return
	 *
	 * PageInfo
	 */
	public PageInfo getPage(int pageNum,int pageSize,BasicWareArea record){
		
         PageHelper.startPage(pageNum, pageSize);  // 开启分页，必须
		
		
	      // 对原来的查询方法不需要任何修改
	      Page page = (Page)basicWareAreaMapper.queryList(record);
		PageInfo<BasicOrg> pageInfo = new PageInfo<BasicOrg>(page); // 对page对象包了一层，里面有一些翻页需要的信息
		
		return pageInfo;
	}
	
	

	/**
	 * 根据wareArea_id
	 * 
	 * @param record
	 * @return
	 */
	public int updateByWareAreaId(BasicWareArea record) {

		int i = 0;
		try {
			i = basicWareAreaMapper.updateByPrimaryKeySelective(record);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new BaseException("001","更新库位失败！");
		}

		return i;

	}

	/**
	 * 
	 * @param record WAREAREA_CODE memberCode
	 */
	public void updateWareAreaByCode(BasicWareArea record){
		
		try {
			basicWareAreaMapper.updateWareAreaByCode(record);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new BaseException("001","更新库位失败！");
		}
	}
	
	
	/**
	 * 
	 * @param record WAREAREA_CODE memberCode
	 * @return
	 */
	public void deleteWareArea(BasicWareArea record) {
	
		try {
		 basicWareAreaMapper.deleteWareArea(record);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
         throw new BaseException("001","删除库位失败！");
		}

		

	}
	

	
	public void saveWareArea(BasicWareArea record){
		
	
		try {
			 basicWareAreaMapper.insertSelective(record);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new BaseException("001","新增库位失败！");
		}
		
		
	}

}
