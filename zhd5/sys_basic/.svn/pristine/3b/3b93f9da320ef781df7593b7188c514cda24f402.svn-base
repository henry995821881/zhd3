/**
 * 智恒达钢盟网络科技有限公司
 */
package com.xyscm.sys.basic.cas.cache;

import java.util.Set;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import redis.clients.jedis.Jedis;
import redis.clients.jedis.JedisPool;
import redis.clients.jedis.JedisPoolConfig;

/**
 * 功能描述：
 * 
 * @author xielf
 * @CreateDate 2017-5-18 上午11:05:11
 * @Version: 1.0
 */
public class RedisManager
{
	private static final Logger logger = LoggerFactory.getLogger(RedisManager.class.getName());

    private String host;
    private int port;
    private int expire;
    private int timeout;
    private String password;
    private static JedisPool jedisPool = null;
    
    
    public RedisManager()
    {
        host = "127.0.0.1";
        port = 6379;
        expire = 0;
        timeout = 0;
        password = "";
    }

    public void init()
    {
        if(jedisPool == null)
            if(password != null && !"".equals(password))
                jedisPool = new JedisPool(new JedisPoolConfig(), host, port, timeout, password);
            else if(timeout != 0)
                jedisPool = new JedisPool(new JedisPoolConfig(), host, port, timeout);
            else
                jedisPool = new JedisPool(new JedisPoolConfig(), host, port);
    }

    public byte[] get(byte key[])
    {
    	byte[] value=null;
    	Jedis jedis=null;
        try {
			jedis = jedisPool.getResource();
			value = jedis.get(key);
		} catch (Throwable e) {
			logger.error("",e);
			if(jedis!=null){
				jedisPool.returnResource(jedis);
			}
			throw e;
		}
        return value;
    }

    public byte[] set(byte key[], byte value[])
    {
    	Jedis jedis = null;
        try {
			jedis = jedisPool.getResource();
			jedis.set(key, value);
			if(expire != 0)
			    jedis.expire(key, expire);
			
		} catch (Exception e) {
			logger.error("",e);
			if(jedis!=null){
				jedisPool.returnResource(jedis);
			}
			throw e;
		}
        
        return value;

    }

    public byte[] set(byte key[], byte value[], int expire)
    {
    	Jedis jedis = null;
        try {
			jedis = jedisPool.getResource();
			jedis.set(key, value);
			if(expire != 0)
			    jedis.expire(key, expire);
			
		} catch (Exception e) {
			logger.error("",e);
			if(jedis!=null){
				jedisPool.returnResource(jedis);
			}
			throw e;
		}
        
        return value;
    }

    public void del(byte key[])
    {
    	Jedis jedis = null;
        try {
			jedis = jedisPool.getResource();
			jedis.del(key);
		} catch (Exception e) {
			logger.error("",e);
			if(jedis!=null){
				jedisPool.returnResource(jedis);
			}
			throw e;
		}
        
    }

    public void flushDB()
    {
    	
    	Jedis jedis = null;
        try {
			jedis = jedisPool.getResource();
			jedis.flushDB();
		} catch (Exception e) {
			logger.error("",e);
			if(jedis!=null){
				jedisPool.returnResource(jedis);
			}
			throw e;
		}
    }

    public Long dbSize()
    {
        Long dbSize;
        Jedis jedis = null;
        try {
			dbSize = Long.valueOf(0L);
			jedis = jedisPool.getResource();
			dbSize = jedis.dbSize();
		} catch (Exception e) {
			logger.error("",e);
			if(jedis!=null){
				jedisPool.returnResource(jedis);
			}
			throw e;
			
		}
        return dbSize;
    }

    public Set keys(String pattern)
    {
        Set keys;
        Jedis jedis = null;
        keys = null;
        try {
			jedis = jedisPool.getResource();
			keys = jedis.keys(pattern.getBytes());
		} catch (Exception e) {
			logger.error("",e);
			if(jedis!=null){
				jedisPool.returnResource(jedis);
			}
			throw e;
		}
        return keys;
    }

    public String getHost()
    {
        return host;
    }

    public void setHost(String host)
    {
        this.host = host;
    }

    public int getPort()
    {
        return port;
    }

    public void setPort(int port)
    {
        this.port = port;
    }

    public int getExpire()
    {
        return expire;
    }

    public void setExpire(int expire)
    {
        this.expire = expire;
    }

    public int getTimeout()
    {
        return timeout;
    }

    public void setTimeout(int timeout)
    {
        this.timeout = timeout;
    }

    public String getPassword()
    {
        return password;
    }

    public void setPassword(String password)
    {
        this.password = password;
    }



}
